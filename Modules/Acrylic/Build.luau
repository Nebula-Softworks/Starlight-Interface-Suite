-- This script was automatically @generated by Maui, it is not intended for manual editing.

local ModuleRoot = {
    {
        ClassName = "ModuleScript",
        Closure = function() local Lighting = game:GetService("Lighting")
local isStudio = game:GetService("RunService"):IsStudio()
local Camera = workspace.CurrentCamera

local function init()
	if not (getgenv and ((getgenv().NoAnticheat == nil and true or getgenv().NoAnticheat) or not getgenv().SecureMode) or isStudio) then return end
	
	local universalDof
	for i,v in pairs(Lighting:GetChildren()) do
		if v:IsA("DepthOfFieldEffect")
			and v.Name ~= "starlightBlur" then
			universalDof = v
		end
	end
	
	if universalDof == nil then
		universalDof = Instance.new("DepthOfFieldEffect")
		universalDof.FarIntensity = 0
		universalDof.NearIntensity = 0
		universalDof.FocusDistance = 500
		universalDof.InFocusRadius = 500
		universalDof.Enabled = true
	end

	local partRoot = Camera:FindFirstChild("Starlight Blur Elements") or Instance.new("Folder", Camera)
	partRoot.Name = "Starlight Blur Elements"

	local blurSize         = Vector2.new(5, 2)
	local partSize         = 0.01
	local partTransparency = 0.99

	local blurObject          = Lighting:FindFirstChild("starlightBlur") ~= nil and Lighting:FindFirstChild("starlightBlur") or universalDof:Clone()
	blurObject.NearIntensity  = 0
	blurObject.FocusDistance  = universalDof.FocusDistance
	blurObject.InFocusRadius = universalDof.InFocusRadius
	blurObject.FarIntensity = universalDof.FarIntensity
	blurObject.Parent         = Lighting
	blurObject.Name = "starlightBlur"

	universalDof:GetPropertyChangedSignal("FarIntensity"):Connect(function()
		blurObject.FarIntensity = universalDof.FarIntensity
	end)
	universalDof:GetPropertyChangedSignal("InFocusRadius"):Connect(function()
		blurObject.InFocusRadius = universalDof.InFocusRadius
	end)
	universalDof:GetPropertyChangedSignal("FocusDistance"):Connect(function()
		blurObject.FocusDistance = universalDof.FocusDistance
	end)
	universalDof:GetPropertyChangedSignal("Enabled"):Connect(function()
		if universalDof.Enabled == false then
			blurObject.FarIntensity = 0
			blurObject.FocusDistance = 500
			blurObject.InFocusRadius = 500
		else
			blurObject.FarIntensity = universalDof.FarIntensity
			blurObject.InFocusRadius = universalDof.InFocusRadius
			blurObject.FocusDistance = universalDof.FocusDistance
		end
	end)
    
    local function enable()
       blurObject.NearIntensity = 1
    end
    
	local function disable()
		blurObject.NearIntensity = 0
    end
    enable()
end

return {
	Init = init,
	AcrylicBlur = require(script.AcrylicBlur),
	CreateAcrylic = require(script.CreateAcrylic),
    AcrylicPaint = require(script.AcrylicPaint),
} end,
        Properties = {
            Name = "MainModule"
        },
        Reference = 1,
        Children = {
            {
                Closure = function() local Creator = require(script.Parent.Creator)
local AcrylicBlur = require(script.Parent.AcrylicBlur)

local New = Creator.New

return function()
	local AcrylicPaint = {}

	AcrylicPaint.Frame = New("Frame", {
		Size = UDim2.fromScale(1, 1),
		BackgroundTransparency = 0.9,
		BackgroundColor3 = Color3.fromRGB(255, 255, 255),
		BorderSizePixel = 0,
		Name = "Acrylic",
		ZIndex = 0,
	}, {
		New("ImageLabel", {
			Image = "rbxassetid://8992230677",
			ScaleType = "Slice",
			SliceCenter = Rect.new(Vector2.new(99, 99), Vector2.new(99, 99)),
			AnchorPoint = Vector2.new(0.5, 0.5),
			Size = UDim2.new(1, 120, 1, 116),
			Position = UDim2.new(0.5, 0, 0.5, 0),
			BackgroundTransparency = 1,
			ImageColor3 = Color3.fromRGB(0, 0, 0),
			ImageTransparency = 0.7,
			Name = "shadow"
		}),

		New("UICorner", {
			CornerRadius = UDim.new(0, 8),
		}),

		New("ImageLabel", {
			Image = "rbxassetid://9968344105",
			ImageTransparency = 0.98,
			ScaleType = Enum.ScaleType.Tile,
			TileSize = UDim2.new(0, 128, 0, 128),
			Size = UDim2.fromScale(1, 1),
			BackgroundTransparency = 1,
			Name = "tint"
		}, {
			New("UICorner", {
				CornerRadius = UDim.new(0, 8),
			}),
		}),

		New("ImageLabel", {
			Image = "rbxassetid://9968344227",
			ImageTransparency = 0.9,
			ScaleType = Enum.ScaleType.Tile,
			TileSize = UDim2.new(0, 128, 0, 128),
			Size = UDim2.fromScale(1, 1),
			BackgroundTransparency = 1,
			Name = "Noise"
		}, {
			New("UICorner", {
				CornerRadius = UDim.new(0, 8),
			}),
		}),
	})

	local Blur = AcrylicBlur()
	Blur.Frame.Parent = AcrylicPaint.Frame
	AcrylicPaint.Model = Blur.Model
	AcrylicPaint.AddParent = Blur.AddParent
	AcrylicPaint.SetVisibility = Blur.SetVisibility

	return AcrylicPaint
end
 end,
                Properties = {
                    Name = "AcrylicPaint"
                },
                Reference = 3,
                ClassName = "ModuleScript"
            },
            {
                Closure = function() local Creator = require(script.Parent.Creator)
local createAcrylic = require(script.Parent.CreateAcrylic)
local viewportPointToWorld, getOffset = unpack(require(script.Parent.Utils))

local BlurFolder = game:GetService("Workspace").CurrentCamera:FindFirstChild("Starlight Blur Elements") and game:GetService("Workspace").CurrentCamera["Starlight Blur Elements"] or Instance.new("Folder", game:GetService("Workspace").CurrentCamera)
BlurFolder.Name = "Starlight Blur Elements"

local function createAcrylicBlur(distance)
	
	if (getgenv and ((getgenv().NoAnticheat == nil and true or getgenv().NoAnticheat) or not getgenv().SecureMode) or isStudio) then return end
	local cleanups = {}

	distance = distance or 0.001
	local positions = {
		topLeft = Vector2.new(),
		topRight = Vector2.new(),
		bottomRight = Vector2.new(),
	}
	local model = createAcrylic()
	local mesh = model:FindFirstChildWhichIsA("SpecialMesh")

	model.Parent = BlurFolder

	local function updatePositions(size, position)
		positions.topLeft = position
		positions.topRight = position + Vector2.new(size.X, 0)
		positions.bottomRight = position + size
	end

	local function render()
		local camera = game:GetService("Workspace").CurrentCamera
		local cameraTransform = if camera then camera.CFrame else CFrame.identity

		local topLeft = positions.topLeft
		local topRight = positions.topRight
		local bottomRight = positions.bottomRight

		local topLeft3D = viewportPointToWorld(topLeft, distance)
		local topRight3D = viewportPointToWorld(topRight, distance)
		local bottomRight3D = viewportPointToWorld(bottomRight, distance)

		local width = (topRight3D - topLeft3D).Magnitude
		local height = (topRight3D - bottomRight3D).Magnitude

		model.CFrame =
			CFrame.fromMatrix((topLeft3D + bottomRight3D) / 2, cameraTransform.XVector, cameraTransform.YVector, cameraTransform.ZVector)

		if mesh then
			mesh.Scale = Vector3.new(width, height, 0)
		end
	end

	local function onChange(rbx)
		local offset = getOffset()
		local size = rbx.AbsoluteSize - Vector2.new(offset, offset)
		local position = rbx.AbsolutePosition + Vector2.new(offset / 2, offset / 2)

		updatePositions(size, position)
		task.spawn(render)
	end

	local function renderOnChange()
		local camera = game:GetService("Workspace").CurrentCamera
		if not camera then
			return
		end

		cleanups[#cleanups + 1] = camera:GetPropertyChangedSignal("CFrame"):Connect(render)
		cleanups[#cleanups + 1] = camera:GetPropertyChangedSignal("ViewportSize"):Connect(render)
		cleanups[#cleanups + 1] = camera:GetPropertyChangedSignal("FieldOfView"):Connect(render)
		task.spawn(render)
	end

	model.Destroying:Connect(function()
		for _, item in cleanups do
			pcall(function()
				item:Disconnect()
			end)
		end
	end)

	renderOnChange()

	return onChange, model
end

return function(distance)
	local Blur = {}
	local onChange, model = createAcrylicBlur(distance)

	local comp = Creator.New("Frame", {
		BackgroundTransparency = 1,
		Size = UDim2.fromScale(1, 1),
	})

	Creator.AddSignal(comp:GetPropertyChangedSignal("AbsolutePosition"), function()
		pcall(onChange, comp)
	end)

	Creator.AddSignal(comp:GetPropertyChangedSignal("AbsoluteSize"), function()
		pcall(onChange, comp)
	end)

	Blur.AddParent = function(Parent)
		Creator.AddSignal(Parent:GetPropertyChangedSignal("Visible"), function()
			Blur.SetVisibility(Parent.Visible)
		end)
		model.Color = Parent.BackgroundColor3
		Creator.AddSignal(Parent:GetPropertyChangedSignal("BackgroundColor3"), function()
			model.Color = Parent.BackgroundColor3
		end)
	end

	Blur.SetVisibility = function(Value)
		pcall(function()
			model.Transparency = Value and 0.98 or 1
		end)
	end

	Blur.Frame = comp
	Blur.Model = model

	return Blur
end
 end,
                Properties = {
                    Name = "AcrylicBlur"
                },
                Reference = 2,
                ClassName = "ModuleScript"
            },
            {
                Closure = function() local Creator = require(script.Parent.Creator)
local isStudio = game:GetService("RunService"):IsStudio()

local function createAcrylic()

	if not (getgenv and ((getgenv().NoAnticheat == nil and true or getgenv().NoAnticheat) or not getgenv().SecureMode) or isStudio) then return end
	
	local Part = Creator.New("Part", {
		Name = "Body",
		Color = Color3.new(0, 0, 0),
		Material = Enum.Material.Glass,
		Size = Vector3.new(1.04, 1.12, 0),
		Anchored = true,
		CanCollide = false,
		Locked = true,
		CastShadow = false,
		Transparency = 0.98,
	}, {
		Creator.New("SpecialMesh", {
			MeshType = Enum.MeshType.Brick,
			Offset = Vector3.new(0, 0, -0.000001),
		})
	})

	return Part
end

return createAcrylic
 end,
                Properties = {
                    Name = "CreateAcrylic"
                },
                Reference = 4,
                ClassName = "ModuleScript"
            },
            {
                Closure = function() local function map(value, inMin, inMax, outMin, outMax)
    return (value - inMin) * (outMax - outMin) / (inMax - inMin) + outMin
end

local function viewportPointToWorld(location, distance)
    local unitRay = workspace.CurrentCamera:ScreenPointToRay(location.X, location.Y)
    return unitRay.Origin + unitRay.Direction * distance
end

local function getOffset()
    local viewportSizeY = workspace.CurrentCamera.ViewportSize.Y
    return map(viewportSizeY, 0, 2560, 8, 56)
end

return {viewportPointToWorld, getOffset} end,
                Properties = {
                    Name = "Utils"
                },
                Reference = 5,
                ClassName = "ModuleScript"
            },
            {
                Closure = function() 
local Creator = {
	Registry = {},
	Signals = {},
	DefaultProperties = {
		ScreenGui = {
			ResetOnSpawn = false,
			ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
		},
		Frame = {
			BackgroundColor3 = Color3.new(1, 1, 1),
			BorderColor3 = Color3.new(0, 0, 0),
			BorderSizePixel = 0,
			ZIndex = 0
		},
		ScrollingFrame = {
			BackgroundColor3 = Color3.new(1, 1, 1),
			BorderColor3 = Color3.new(0, 0, 0),
			ScrollBarImageColor3 = Color3.new(0, 0, 0),
			ZIndex = 0
		},
		TextLabel = {
			BackgroundColor3 = Color3.new(1, 1, 1),
			BorderColor3 = Color3.new(0, 0, 0),
			Font = Enum.Font.SourceSans,
			Text = "",
			TextColor3 = Color3.new(0, 0, 0),
			BackgroundTransparency = 1,
			TextSize = 14,
			RichText = true,
			ZIndex = 0
		},
		TextButton = {
			BackgroundColor3 = Color3.new(1, 1, 1),
			BorderColor3 = Color3.new(0, 0, 0),
			AutoButtonColor = false,
			Font = Enum.Font.SourceSans,
			Text = "",
			TextColor3 = Color3.new(0, 0, 0),
			TextSize = 14,
			RichText = true,
			ZIndex = 0
		},
		TextBox = {
			BackgroundColor3 = Color3.new(1, 1, 1),
			BorderColor3 = Color3.new(0, 0, 0),
			ClearTextOnFocus = false,
			Font = Enum.Font.SourceSans,
			Text = "",
			TextColor3 = Color3.new(0, 0, 0),
			TextSize = 14,
			RichText = true,
			ZIndex = 0
		},
		ImageLabel = {
			BackgroundTransparency = 1,
			BackgroundColor3 = Color3.new(1, 1, 1),
			BorderColor3 = Color3.new(0, 0, 0),
			BorderSizePixel = 0,
			ZIndex = 0
		},
		ImageButton = {
			BackgroundColor3 = Color3.new(1, 1, 1),
			BorderColor3 = Color3.new(0, 0, 0),
			AutoButtonColor = false,
			ZIndex = 0
		},
		CanvasGroup = {
			BackgroundColor3 = Color3.new(1, 1, 1),
			BorderColor3 = Color3.new(0, 0, 0),
			BorderSizePixel = 0,
			ZIndex = 0
		}
	},
}

local function ApplyCustomProps(Object, Props: { [string]: any }?)
	
end

function Creator.AddSignal(Signal: RBXScriptSignal, Function)
	Creator.Signals[#Creator.Signals+1] = Signal:Connect(Function)
end

function Creator.Disconnect()
	for Idx = #Creator.Signals, 1, -1 do
		local Connection = table.remove(Creator.Signals, Idx)
		
		if Connection then
			Connection:Disconnect()
		end
	end
end

function Creator.New(Name, Properties: { [string]: any }?, Children: { [number]: Instance }?): Instance
	local Object = Instance.new(Name)

	-- Default properties
	for Name, Value in next, Creator.DefaultProperties[Name] or {} do
		Object[Name] = Value
	end

	-- Properties
	for Name, Value in next, Properties or {} do
		if Name ~= "ThemeTag" then
			Object[Name] = Value
		end
	end

	-- Children
	for _, Child in next, Children or {} do
		Child.Parent = Object
	end

	ApplyCustomProps(Object, Properties)

	return Object
end
--[[
function Creator.SpringMotor(Initial: any, Instance: Object, Prop: string, IgnoreDialogCheck: boolean?, ResetOnThemeChange: boolean?)
	IgnoreDialogCheck = IgnoreDialogCheck or false
	ResetOnThemeChange = ResetOnThemeChange or false
	local Motor = Flipper.SingleMotor.new(Initial)
	Motor:onStep(function(value)
		Instance[Prop] = value
	end)

	if ResetOnThemeChange then
		Creator.TransparencyMotors[#Creator.TransparencyMotors + 1] = Motor
	end

	local function SetValue(Value, Ignore: boolean?)
		Ignore = Ignore or false
		if not IgnoreDialogCheck then
			if not Ignore then
				if Prop == "BackgroundTransparency" and require(Root).DialogOpen then
					return
				end
			end
		end
		Motor:setGoal(Flipper.Spring.new(Value, { frequency = 8 }))
	end

	return Motor, SetValue
end]]

return Creator
 end,
                Properties = {
                    Name = "Creator"
                },
                Reference = 6,
                ClassName = "ModuleScript"
            }
        }
    }
} do local a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p='0.4.2',Flags or{},script,next,unpack,table,require,type,pcall,getfenv,setfenv,setmetatable,rawget,coroutine,task,Instance local q,r,s,t,u,v,w,x,y=f.insert,f.freeze,n.wrap,o.defer,o.cancel,p.new,(b.ContextualExecution==nil and true)or b.ContextualExecution do if w then local z=game:GetService'RunService'x=z:IsServer()y=z:IsClient()end end local z,A,B,C,D,E={},{},{},{},{},{}local function F(G)local H,I=i(v,G.ClassName)if not H then return end z[G.Reference]=I if G.Closure then B[I]=G.Closure if I:IsA'BaseScript'then q(D,I)end end if G.Properties then for J,K in d,G.Properties do i(function()I[J]=K end)end end if G.RefProperties then for J,K in d,G.RefProperties do q(A,{InstanceObject=I,Property=J,ReferenceId=K})end end if G.Attributes then for J,K in d,G.Attributes do i(I.SetAttribute,I,J,K)end end if G.Children then for J,K in d,G.Children do local L=F(K)if L then L.Parent=I end end end return I end local G={}do for H,I in d,ModuleRoot do q(G,F(I))end end local H=j(0)local function I(J)local K=C[J]if J.ClassName=='ModuleScript'and K then return e(K)end local L=B[J]if not L then return end do local M local N={['maui']=r{Version=a,Script=c,Shared=E,GetScript=function()return c end,GetShared=function()return E end},['script']=J,['require']=function(N,...)if N and N.ClassName=='ModuleScript'and B[N]then return I(N)end return g(N,...)end,['getfenv']=function(N,...)if h(N)=='number'and N>=0 then if N==0 then return M else N=N+1 local O,P=i(j,N)if O and P==H then return M end end end return j(N,...)end,['setfenv']=function(N,O,...)if h(N)=='number'and N>=0 then if N==0 then return k(M,O)else N=N+1 local P,Q=i(j,N)if P and Q==H then return k(M,O)end end end return k(N,O,...)end}M=l({},{__index=function(O,P)local Q=m(M,P)if Q~=nil then return Q end local R=N[P]if R~=nil then return R end return H[P]end})k(L,M)end local M=s(L)if J:IsA'BaseScript'then local N=(not w or not J.Disabled)and t(M)if w then local O O=J:GetPropertyChangedSignal'Disabled':Connect(function(P)O:Disconnect()if P==false then I(J)else i(u,N)end end)end return else local N={M()}C[J]=N return e(N)end end for J,K in d,A do i(function()K.InstanceObject[K.Property]=z[K.ReferenceId]end)end for L,M in d,D do if not w or((x and M.ClassName=='Script')or(y and M.ClassName=='LocalScript'))then I(M)end end if b.ReturnMainModule==nil or b.ReturnMainModule then local N do for O,P in d,G do if P.ClassName=='ModuleScript'and P.Name=='MainModule'then N=P break end end end if N then return I(N)end end end